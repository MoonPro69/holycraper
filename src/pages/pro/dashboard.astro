---
// this page will only be reached if the user is signed in
// this is a dashboard
// they can edit their profile, subscribe, check their subscription status and cancel it
import styles from "@styles/Subscriber.module.scss";
import MainLayout from "@layouts/MainLayout.astro";
import themeStyles from "@styles/ThemeElements.module.scss";
import Banner from "@components/Banner.astro";
import Delete from "@icons/delete_24dp_FILL1_wght400_GRAD0_opsz24.svg?react";
import prettyMilliseconds from "pretty-ms";
import { db, getTierName, getUserPayment, stripe } from "@config/apis";
import { appConfig } from "@config/config";
import { giveTierDiscordRoles } from "@config/apis";

const { user, acc } = Astro.locals;
if (await acc.isBanned()) return acc.toBan();
if (!user) return acc.toLogin();
if (!user.email_verified) return acc.toVerifyEmail();

let error: string | undefined;
let success: string | undefined;

const payment = await getUserPayment(user.id);

const newEmailConfirmed = Astro.url.searchParams.has("newEmailConfirmed");
const welcome = Astro.url.searchParams.has("welcome");
const discordConnected = Astro.url.searchParams.has("disc_connected");
let userNotInDiscordServer = false;

// for displaying the error
if (discordConnected)
  userNotInDiscordServer = !(await giveTierDiscordRoles(user, payment?.tier));

if (Astro.request.method === "POST")
  try {
    const data = await Astro.request.formData();
    const type = data.get("type")?.toString();

    switch (type) {
      case "renew":
        if (typeof payment?.subscription_id === "string") {
          // error = "Not implemented yet! (please try again tomorrow - David)";
          // Astro.response.status = 500;
          payment.stripe_renew = !payment.stripe_renew;

          await stripe.subscriptions.update(payment.subscription_id, {
            pause_collection: payment.stripe_renew
              ? null
              : {
                  behavior: "void",
                },
          });

          await db.query(
            "UPDATE payments SET stripe_renew = $1 WHERE invoice_id = $2;",
            [payment.stripe_renew, payment.invoice_id]
          );

          success = `Renewal ${payment.stripe_renew ? "on" : "off"}.`;
        } else console.log("bad payment", payment);
        break;

      case "unlink-discord":
        if (user.discord_id === null) {
          error = "You don't have a Discord linked.";
          Astro.response.status = 400;
        } else {
          // take away their roles
          await giveTierDiscordRoles(user, payment?.tier, true);
          await db.query(
            "UPDATE users SET discord_id = null, discord_username = null, discord_avatar = null, discord_name = null, discord_updated = null WHERE id = $1;",
            [user.id]
          );
          success = "Discord account unlinked.";
          user.discord_id = null;
        }
        break;
    }
  } catch (err) {
    console.error(err);
  }
---

{
  (newEmailConfirmed ||
    welcome ||
    discordConnected ||
    Astro.request.method === "POST") && (
    <script>history.pushState({}, "", "/pro/dashboard")</script>
  )
}
<MainLayout>
  <main class={styles.subscriberMain}>
    <h1 class="page-title">Dashboard for {user.email}</h1>
    {newEmailConfirmed && <Banner success="Email changed." />}
    {welcome && <Banner success="Email verified." />}
    {
      userNotInDiscordServer && (
        <Banner
          error="We couldn't find your Discord account in our server"
          success="Account connected."
        />
      )
    }
    {discordConnected && <Banner success="Account connected." />}
    <Banner success={success} error={error} />
    <div class={styles.userCard}>
      <h3>Account Actions:</h3>
      <p>
        <a class={themeStyles.themeLink} href="/pro/change-password"
          >Change Password</a
        >
      </p>
      <p>
        <a class={themeStyles.themeLink} href="/pro/change-email"
          >Change Email</a
        >
      </p>
      <p>
        <a
          class={themeStyles.themeLink}
          href="/pro/logout"
          data-astro-prefetch="false">Log Out</a
        >
      </p>
    </div>
    <div class={styles.userCard} style="padding-bottom:10px;">
      <h3>Subscription</h3>
      {
        payment ? (
          <>
            <p>
              Your subscription ends in{" "}
              <span
                set:text={prettyMilliseconds(
                  payment.period_end.getTime() - Date.now()
                )}
                data-period_end={payment.period_end.getTime()}
              />
            </p>
            <p>Current plan: {getTierName(payment?.tier)}</p>
          </>
        ) : (
          <>
            <p>You don't currently have a subscription.</p>
          </>
        )
      }
    </div>
    <div class={styles.userCard} style="padding-bottom:10px;">
      <h3>Auto Renewal</h3>
      {
        payment?.tier === 2 ? (
          <input
            type="button"
            class={styles.prettySubmit}
            disabled
            data-owned
            value="TYSM FOR SUBSCRIBING TO ULTIMATE!!!"
          />
        ) : (
          <a href="/pro/tiers">
            <input
              type="button"
              class={styles.prettySubmit}
              value={payment ? "UPGRADE TO ULTIMATE!!" : "Subscribe"}
            />
          </a>
        )
      }
      <p>
        We will try to automatically renew your subscription before it ends so
        you don't lose access to your subscriber benefits.
      </p>
      <p>To prevent renewal, you can cancel your subscription.</p>
      <p>
        You can cancel at anytime, and you can re-subscribe for free until your
        subscription has ended.
      </p>
      {
        payment && (
          <form
            method="post"
            class={styles.cancelSubscription}
            id="renewal"
            data-stripe_renew={payment.stripe_renew || null}
          >
            <input type="text" name="type" value="renewal" hidden />
            <input
              type="checkbox"
              name="renewal"
              checked={payment.stripe_renew}
              hidden
            />
            <input
              type="submit"
              class={styles.prettySubmit}
              value={
                payment.stripe_renew
                  ? "Disable auto-renewal"
                  : "Enable auto-renewal"
              }
            />
          </form>
        )
      }
    </div>
    <div class={styles.userCard} style="padding-bottom:10px;">
      <h3>Connected Accounts</h3>
      <p>Once you connect an account, it will show up here.</p>
      <div class={styles.userConnection}>
        <span class={styles.serviceName}>Discord:</span>
        {
          user.discord_id === null ? (
            <a
              href={`https://discord.com/oauth2/authorize?client_id=${appConfig.discord!.clientId}&response_type=code&redirect_uri=${encodeURIComponent(appConfig.discord!.clientRedirectURI)}&scope=identify`}
            >
              <input
                type="button"
                class={styles.prettySubmit}
                value="Connect Discord"
              />
            </a>
          ) : (
            <>
              <span class={styles.details}>
                <img
                  src={`https://cdn.discordapp.com/avatars/${user.discord_id}/${user.discord_avatar}.png`}
                  class={styles.avatar}
                />
                <span set:text={user.discord_name} class={styles.username} />
              </span>
              <form class={styles.delete} method="post">
                <input type="text" name="type" value="unlink-discord" hidden />
                <button set:html={Delete} />
              </form>
            </>
          )
        }
      </div>
    </div>
  </main>
</MainLayout>

<script>
  import prettyMilliseconds from "pretty-ms";

  document.addEventListener("astro:page-load", () => {
    const stripe_renew = document.querySelector("[data-stripe_renew]")
      ? true
      : false;

    const renewal = document.querySelector<HTMLInputElement>("#renewal")!;
    renewal.addEventListener("submit", (event) => {
      if (
        !confirm(
          `Are you ABSOLUTELY sure you ${stripe_renew ? "disable" : "enable"} auto-renewal for your subscription? btw you can change this at any time`
        )
      )
        event.preventDefault();
    });

    // REAL TIME period_end COUNTDOWN
    const countdown =
      document.querySelector<HTMLSpanElement>("[data-period_end]");
    if (countdown !== null) {
      const period_end = Number(countdown.getAttribute("data-period_end")!);
      const callback = () => {
        const expires = period_end - Date.now();
        if (expires <= 0) {
          alert("TIME'S UP. YOUR SUSBCRIPTION EXIPRED.");
          location.reload();
          clearInterval(i);
        }
        countdown.textContent = prettyMilliseconds(expires);
      };
      const i = setInterval(callback, 1);
    }
  });
</script>
